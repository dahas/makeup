<?php

namespace makeup\app\controller;

/* *****************************************************************************
 *
 * DO NOT EDIT THIS FILE!
 * Use the ini-File to modify it: app/config/app.ini
 * 
 * This class creates the HTML skeleton. It adds meta tags, 
 * scripts and css-files to the head section of the file.
 *
 * ****************************************************************************/
function autoloader($class)
{
	require str_replace(__NAMESPACE__, '', __DIR__) . strtolower($class) . '.php';
}


spl_autoload_register(__NAMESPACE__ . '\autoloader');

require_once "makeup/vendor/autoload.php";

use makeup\lib\Config;
use makeup\lib\Template;
use makeup\lib\Tools;
use makeup\lib\Module;


class App extends Module
{
	// Calling the parent constructor is required!
	public function __construct()
	{
		session_start();

		// Simulate login:
		$_SESSION["logged_in"] = false;

		parent::__construct();
	}


	/**
	 * Build and render the complete HTML.
	 *
	 * @param $modName
	 * @return mixed|string
	 */
	public function render($modName = "")
	{
		$additionalJsFilesHead = Config::getAdditionalJsFilesHead();
		$additionalJsFilesBody = Config::getAdditionalJsFilesBody();

		// If no module name is given, use the default one!
		if (!$modName)
			$modName = Config::get('app_settings', 'layout_default_module');

		$ModLayout = Module::create("layout");
		$marker['%LAYOUT%'] = $ModLayout->render($modName);

		// Adds meta tags to the head section as defined in the ini files.
		$marker['%CONF_METATAGS%'] = Template::createMetaTags();
		
		// Adds the title to the head section as defined in the ini files.
		$marker['%TITLE%'] = Template::createTitleTag();

		// Adds stylsheet links to the head section as defined in the ini files.
		$marker['%CONF_CSS_FILES%'] = Template::createStylesheetTags();

		$SubJsFilesHead = $this->getTemplate()->getSubpart('%CONF_JS_FILES_HEAD%');
		$subpart['%CONF_JS_FILES_HEAD%'] = '';
		if (isset($additionalJsFilesHead['js'])) {
			foreach ($additionalJsFilesHead['js'] as $file) {
				if ($file) {
					$jsMarker['%FILE%'] = $file;
					$subpart['%CONF_JS_FILES_HEAD%'] .= $SubJsFilesHead->parse($jsMarker);
				}
			}
		}

		$SubJsFilesBody = $this->getTemplate()->getSubpart('%CONF_JS_FILES_BODY%');
		$subpart['%CONF_JS_FILES_BODY%'] = '';
		if (isset($additionalJsFilesBody['js'])) {
			foreach ($additionalJsFilesBody['js'] as $file) {
				if ($file) {
					$jsMarker['%FILE%'] = $file;
					$subpart['%CONF_JS_FILES_BODY%'] .= $SubJsFilesBody->parse($jsMarker);
				}
			}
		}

		return $this->getTemplate()->parse($marker, $subpart);
	}


	/**
	 * Run and output the app.
	 * 
	 * @return mixed|string
	 */
	public function execute()
	{
		// Parameter "mod" is the required module name.
		$modName = $this->RQ['mod'];

		// Parameter "task" is required, so that the module knows, 
		// which task to execute.
		$task = $this->RQ['task'];

		// With parameter "nowrap" a module is rendered with its own template only.
		// No other HTML (neither app nor layout) is wrapped around it.
		if (isset($this->RQ['nowrap']) || $task != "render") {
			$appHtml = Module::create($modName)->$task();
		} else {
			// The app will be renderd, if it is NOT protected.
			// Or if it is protected and the user is signed in.
			$appHtml = $this->render($modName);
		}

		// Deny access to a protected page as long as the user isn´t signed in.
		if (Config::get("page_settings|protected") == "1" && (!isset($_SESSION["logged_in"]) || $_SESSION["logged_in"] == false))
			die("Access denied!");

		// Deny access to the whole app as long as the user isn´t signed in.
		if (Config::get("app_settings|protected") == "1" && (!isset($_SESSION["logged_in"]) || $_SESSION["logged_in"] == false))
			die("Access denied!");

		die($appHtml);
	}


	public function __destruct()
	{
		unset($this->DB);
		unset($this);
	}


}

