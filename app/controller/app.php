<?php

namespace makeup\app\controller;


/**********************************************************************************************************************
 *
 *    DO NOT EDIT THIS FILE!
 *    Use the ini-File to modify it: app/config/app.ini
 *
 **********************************************************************************************************************/


function autoloader($class)
{
    require str_replace(__NAMESPACE__, '', __DIR__) . strtolower($class) . '.php';
}

spl_autoload_register(__NAMESPACE__ . '\autoloader');


require_once "makeup/vendor/autoload.php";


use makeup\lib\Config;
use makeup\lib\Tools;
use makeup\lib\Module;


class App extends Module
{
    /**
     * Calling the parent constructor is required!
     */
    public function __construct()
    {
        parent::__construct();
    }


    /**
     * Run the app and display its content.
     *
     * @return mixed|string
     */
    public function execute()
    {
        $modName = $this->RQ['mod']; // Parameter "mod" is the required module name.
        $task = $this->RQ['task']; // Parameter "task" is required, so that the module knows, which task to execute.

        /**
         * Parameter "nowrap" displays a module with its own template only.
         * No other HTML (neither app nor layout template) is wrapped around it.
         */
        if (isset($this->RQ['nowrap']) || $task != "render")
            $appHtml = Module::create($modName)->$task();
        else {
            $appHtml = $this->render($modName);
        }

        die($appHtml);
    }


    /**
     * Build and render the complete HTML.
     *
     * @param $modName
     * @return mixed|string
     */
    public function render($modName = "")
    {
        $additionalCssFiles = Config::getAdditionalCssFiles();
        $additionalJsFilesHead = Config::getAdditionalJsFilesHead();
        $additionalJsFilesBody = Config::getAdditionalJsFilesBody();

        $bodyOnload = Tools::getBodyOnload();

        /**
         * If no module name is given, use the default one!
         */
        if (!$modName)
            $modName = Config::get('app_settings|layout_default_module');

        $ModLayout = Module::create(Config::get('app_settings|layout_module'));
        $marker['%LAYOUT%'] = $ModLayout->render($modName);

        $marker['%CONFIG_LANG%'] = Config::get('page_settings|html_lang');
        $marker['%CONFIG_TITLE%'] = Config::get('page_settings|title');
        $marker['%CONFIG_CHARSET%'] = Config::get('page_settings|meta_charset');
        $marker['%CONFIG_VIEWPORT%'] = Config::get('metatags|viewport');
        $marker['%CONFIG_DESCRIPTION%'] = Config::get('metatags|description');
        $marker['%CONFIG_AUTHOR%'] = Config::get('metatags|author');

        $SubBodyTag = $this->Template->getSubpart('%BODY_ONLOAD%');
        $subpart['%BODY_ONLOAD%'] = '';
        if ($bodyOnload) {
            $markerBdOl['%ONLOAD%'] = $bodyOnload;
            $subpart['%BODY_ONLOAD%'] = $SubBodyTag->parse($markerBdOl);
        }

        $SubMetaTags = $this->Template->getSubpart('%CONF_METATAGS%');
        $subpart['%CONF_METATAGS%'] = '';
        if (isset($this->config['metatags'])) {
            foreach ($this->config['metatags'] as $meta => $content) {
                $metaMarker['%NAME%'] = $meta;
                $metaMarker['%CONTENT%'] = $content;
                $subpart['%CONF_METATAGS%'] .= $SubMetaTags->parse($metaMarker);
            }
        }

        $SubCSSFiles = $this->Template->getSubpart('%CONF_CSS_FILES%');
        $subpart['%CONF_CSS_FILES%'] = '';
        if (isset($additionalCssFiles['css'])) {
            foreach ($additionalCssFiles['css'] as $file) {
                if ($file) {
                    $cssMarker['%FILE%'] = $file;
                    $subpart['%CONF_CSS_FILES%'] .= $SubCSSFiles->parse($cssMarker);
                }
            }
        }

        $SubJsFilesHead = $this->Template->getSubpart('%CONF_JS_FILES_HEAD%');
        $subpart['%CONF_JS_FILES_HEAD%'] = '';
        if (isset($additionalJsFilesHead['js'])) {
            foreach ($additionalJsFilesHead['js'] as $file) {
                if ($file) {
                    $jsMarker['%FILE%'] = $file;
                    $subpart['%CONF_JS_FILES_HEAD%'] .= $SubJsFilesHead->parse($jsMarker);
                }
            }
        }

        $SubJsFilesBody = $this->Template->getSubpart('%CONF_JS_FILES_BODY%');
        $subpart['%CONF_JS_FILES_BODY%'] = '';
        if (isset($additionalJsFilesBody['js'])) {
            foreach ($additionalJsFilesBody['js'] as $file) {
                if ($file) {
                    $jsMarker['%FILE%'] = $file;
                    $subpart['%CONF_JS_FILES_BODY%'] .= $SubJsFilesBody->parse($jsMarker);
                }
            }
        }

        return $this->Template->parse($marker, $subpart);
    }


    public function __destruct()
    {
        unset($this->DB);
        unset($this);
    }
}
